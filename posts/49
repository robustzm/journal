# [journal.

stuffwithstuff.com][1]

   [1]: http://journal.stuffwithstuff.com/

## me

  * [bob nystrom][2] is me
  * [bitbucket][3] has code
  * [github][4] has code
  * [flickr][5] has photos
  * [twitter][6] has status
  * [vimeo][7] has video

   [2]: http://www.stuffwithstuff.com/bob-nystrom.html
   [3]: http://bitbucket.org/munificent/
   [4]: http://github.com/munificent/
   [5]: http://www.flickr.com/photos/bobisbob/
   [6]: http://twitter.com/munificentbob
   [7]: http://vimeo.com/bobisbob

## archives

  * [2011][8]
  * [2010][9]
  * [2009][10]
  * [2008][11]

   [8]: http://journal.stuffwithstuff.com/2011/ (2011)
   [9]: http://journal.stuffwithstuff.com/2010/ (2010)
   [10]: http://journal.stuffwithstuff.com/2009/ (2009)
   [11]: http://journal.stuffwithstuff.com/2008/ (2008)

## tags

  * [blog][12] (2)
  * [c#][13] (13)
  * [code][14] (48)
  * [cpp][15] (7)
  * [design][16] (3)
  * [f#][17] (2)
  * [finch][18] (3)
  * [game-dev][19] (6)
  * [game-patterns][20] (3)
  * [go][21] (2)
  * [jasic][22] (1)
  * [java][23] (10)
  * [javascript][24] (3)
  * [language][25] (29)
  * [magpie][26] (19)
  * [optimization][27] (1)
  * [oscon][28] (1)
  * [parsing][29] (7)
  * [politics][30] (1)
  * [python][31] (2)
  * [roguelike][32] (2)
  * [ruby][33] (1)
  * [sml][34] (1)
  * [visualization][35] (1)

   [12]: http://journal.stuffwithstuff.com/category/blog/ (View all posts filed under blog)
   [13]: http://journal.stuffwithstuff.com/category/c/ (View all posts filed under c#)
   [14]: http://journal.stuffwithstuff.com/category/code/ (View all posts filed under code)
   [15]: http://journal.stuffwithstuff.com/category/cpp/ (View all posts filed under cpp)
   [16]: http://journal.stuffwithstuff.com/category/design/ (View all posts filed under design)
   [17]: http://journal.stuffwithstuff.com/category/f/ (View all posts filed under f#)
   [18]: http://journal.stuffwithstuff.com/category/finch/ (View all posts filed under finch)
   [19]: http://journal.stuffwithstuff.com/category/game-dev/ (View all posts filed under game-dev)
   [20]: http://journal.stuffwithstuff.com/category/game-patterns/ (View all posts filed under game-patterns)
   [21]: http://journal.stuffwithstuff.com/category/go/ (View all posts filed under go)
   [22]: http://journal.stuffwithstuff.com/category/jasic/ (View all posts filed under jasic)
   [23]: http://journal.stuffwithstuff.com/category/java/ (View all posts filed under java)
   [24]: http://journal.stuffwithstuff.com/category/javascript/ (View all posts filed under javascript)
   [25]: http://journal.stuffwithstuff.com/category/language/ (View all posts filed under language)
   [26]: http://journal.stuffwithstuff.com/category/magpie/ (View all posts filed under magpie)
   [27]: http://journal.stuffwithstuff.com/category/optimization/ (View all posts filed under optimization)
   [28]: http://journal.stuffwithstuff.com/category/oscon/ (View all posts filed under oscon)
   [29]: http://journal.stuffwithstuff.com/category/parsing/ (View all posts filed under parsing)
   [30]: http://journal.stuffwithstuff.com/category/politics/ (View all posts filed under politics)
   [31]: http://journal.stuffwithstuff.com/category/python/ (View all posts filed under python)
   [32]: http://journal.stuffwithstuff.com/category/roguelike/ (View all posts filed under roguelike)
   [33]: http://journal.stuffwithstuff.com/category/ruby/ (View all posts filed under ruby)
   [34]: http://journal.stuffwithstuff.com/category/sml/ (View all posts filed under sml)
   [35]: http://journal.stuffwithstuff.com/category/visualization/ (View all posts filed under visualization)

## info

  * [famfamfam][36] provides icons
  * [RSS][37] syndicates me
  * [WordPress][38] powers me

   [36]: http://famfamfam.com/lab/icons/silk/
   [37]: feed:http://journal.stuffwithstuff.com/feed/
   [38]: http://wordpress.org/

## [Magpie Wants You!][39]

   [39]: http://journal.stuffwithstuff.com/2011/06/06/magpie-wants-you/ (Magpie Wants You!)

[code][40] | [language][41] | [magpie][42] | [oscon][43] [2011][44] / [06][45]
/ [06][46]

   [40]: http://journal.stuffwithstuff.com/category/code/ (View all posts in code)
   [41]: http://journal.stuffwithstuff.com/category/language/ (View all posts in language)
   [42]: http://journal.stuffwithstuff.com/category/magpie/ (View all posts in magpie)
   [43]: http://journal.stuffwithstuff.com/category/oscon/ (View all posts in oscon)
   [44]: http://journal.stuffwithstuff.com/2011/ (year)
   [45]: http://journal.stuffwithstuff.com/2011/06/ (month)
   [46]: http://journal.stuffwithstuff.com/2011/06/06/

I've been very fortunate to get lots of feedback and encouragement so far
while I've worked on my [little language Magpie][47], but I haven't actually
asked for people to get directly involved. I still had lots of basic syntax
and semantic decisions to make and it would have been an exercise in
frustration to drag anyone else along through that.

   [47]: http://magpie.stuffwithstuff.com

I may be entirely wrong, but I think I'm past the worst of that. Now that
[classes][48], [patterns][49], and [multimethods][50] are implemented and
working, I believe Magpie may be at a point where adventurous souls could try
to play with it. Multimethods were the big missing piece, and I'm super
excited that they're working now. To give you an idea why, here's some fun
stuff they enable:

   [48]: http://magpie.stuffwithstuff.com/classes.html
   [49]: http://magpie.stuffwithstuff.com/patterns.html
   [50]: http://magpie.stuffwithstuff.com/multimethods.html

## Overloading Methods

Magpie is a dynamically-typed language (flirtations with optional static
typing notwithstanding). But in Magpie, every method is a multimethod, which
means you can overload them.



    def (this is String) split()
        this split(" ")
    end

    def (this is String) split(separator is String)
        ...
    end


Here we've defined two `split` methods on strings. The first takes no
arguments, and the second takes a separator. This means you can do:



    "eenie-meenie-miney-moe" split("-")


or



    "eenie-meenie-miney-moe" split()


In most dynamic languages, you'd have to handle that by doing some manual
`instanceof` or `!== undefined` checks. In Magpie, it just works. You can
overload by arity or type, or both:



    def (this is String) split(maxResults is Int)
        ...
    end

    def (this is String) split(separator is String, maxResults is Int)
        ...
    end


Pretty much any kind of argument list can be overloaded and it will pick the
right one at runtime based on what you actually pass it.

And just to clarify, you don't have to define all of these methods in one
place or even in one module. They can be anywhere you want. In fact, you're
free to define methods on types you didn't create, which leads us to…

## Sane Monkey-Patching

One of the most powerful features of Ruby is that you can extend existing
classes with new methods. This lets you define libraries which make the most
of Ruby's `object.method` syntax and can lead to beautifully readable APIs.

The problem, though, is that if two libraries happen to cram a method with the
_same_ name on the _same_ class, [all hell breaks loose][51]. Very high on my
list of goals for Magpie was to solve this problem, which is why classes don't
own methods. Instead, they are lexically scoped like variables.

   [51]: http://www.benjamincoe.com/post/6234388028/why-i-hate-ruby-or-at-least-some-common-practices-of

This means that when you define a method "on" a class like our `split` method
up there, you aren't touching the class at all. Instead, you're defining a
function in your local scope that happens to take a String as its left-hand
argument. Outside of the scope where you defined it, that method doesn't
exist.

If two different modules define methods on the same class with the same name,
there's no collision, as long as they don't import each other. You can even
use both of those modules in the same program without collision. You should be
free to define methods on any classes you like if it makes your code easier to
read.

## Do Actual Stuff

Of course, all of the neat language features in the world are pretty useless
if the language can't solve actual problems. For almost all of its history,
the only thing you could actually do with Magpie was print to standard out. I
know, not very inspiring.

Fortunately, I'm finally getting to the fun part of building real APIs for
file IO, concurrency, networking, etc. I have a _ton_ of work to do here
(hopefully with your help!) but at least now you can read files and spawn
threads. To prove it, here's a toy asynchronous web server:



    import io
    import net
    import async

    val server = ServerSocket new(8080)
    while true do
        val socket = server accept()
        // Start a new thread to respond to the request.
        run with
            // Process the request (assume its a GET).
            val path = socket readLine() split(" ")[1]

            // Open the file being served.
            open("." + path) use with
                // Read it and write it to the socket.
                socket write(it read())
            end
            socket close()
        end
    end


## Where You Come In

If you've ever had the desire to help build a programming language and its
ecosystem, and what you see here looks cool, I'd love to have you involved. It
will be a lot of work, and it's likely that more things are broken than
working, but you'll have the chance to get in on the ground floor. Hell, you
may be _building_ the ground floor. If that sounds like fun, here's what you
can do:

  * Join [the mailing list][52]. It's… um… _dormant_ right now, but with your help I hope we can get it going.
  * If you aren't an IRC noob like me, try to get a channel for Magpie set up and let me know. I'll try to hang out on it as much as I can.
  * Read [the guide][53]. It still needs work, but the majority of the language features are documented there. Let me know if you find errors, omissions, or stuff that's unclear. Take a look at some [example programs][54] too.
  * Try out the interpreter. [Clone the repo][55], build it, and try writing toy programs. What worked like you expected, and what didn't? Let me know, preferably on the list.
  * Start looking at the code. The current implementation is focused on simplicity and certainly not efficiency. If you can read Java you might not find it too difficult. If you're feeling brave, start hacking. Fleshing out APIs like IO would be hugely helpful, but scratch whatever itches you.

   [52]: http://groups.google.com/group/magpie-lang?pli=1
   [53]: http://magpie.stuffwithstuff.com/
   [54]: https://github.com/munificent/magpie/tree/master/example
   [55]: https://github.com/munificent/magpie

That's really about it. You might want to [follow me on twitter][56] or [point
your RSS reader at my blog][57] too. Beyond that, we'll have to see where it
goes from here.

   [56]: http://twitter.com/#!/munificentbob
   [57]: http://journal.stuffwithstuff.com

## What Comes Next

Of course, it's entirely possible that no one will sign the charter for this
little voyage but me, and that's OK. I'll keep hacking on Magpie regardless,
but for the next few weeks, I've got something much more fun to focus on:
preparing for [my talk on Magpie at OSCON][58].

   [58]: http://www.oscon.com/oscon2011/public/schedule/detail/18551

I feel like I didn't stress that enough. [OMG I'M GIVING A TALK ON MAGPIE AT
OSCON][59]. It's hard to describe how that makes me feel. Kind of like kissing
the prettiest girl in middle school behind the bleachers but also I just drank
a huge cherry Slurpy and I kind of feel like I need to throw up. Something
like that.

   [59]: http://www.oscon.com/oscon2011/public/schedule/detail/18551

I will be speaking on Thursday July 28th at 1:40 PM. I'm not sure if that
means that I'll be drinking _before_ 1:40 or _after_. Perhaps a little bit of
both just to be safe.

So, if you're going to be at OSCON this year (and you should be because OMG
I'm giving a talk at it!), come see my talk. At the very worst, I promise to
give you a hug afterwards if you ask nicely. So even if the talk bombs, you
get a free hug.

Discuss this at one of the sites below (or another of your choice):

[ ![][60]][61]

   [60]: http://cdn.stumble-upon.com/images/120x20_su_white.gif
   [61]: http://www.stumbleupon.com/submit?url=http://journal.stuffwithstuff.com%26title%3DThe%2BArticle%2BTitle

If you want to contact me directly, feel free to email at "name@site" where
"name" is "robert" and "site" is "stuffwithstuff.com".

(C) 2008-2009 Robert Nystrom


