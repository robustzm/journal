# [journal.

stuffwithstuff.com][1]

   [1]: http://journal.stuffwithstuff.com/

## me

  * [bob nystrom][2] is me
  * [bitbucket][3] has code
  * [github][4] has code
  * [flickr][5] has photos
  * [twitter][6] has status
  * [vimeo][7] has video

   [2]: http://www.stuffwithstuff.com/bob-nystrom.html
   [3]: http://bitbucket.org/munificent/
   [4]: http://github.com/munificent/
   [5]: http://www.flickr.com/photos/bobisbob/
   [6]: http://twitter.com/munificentbob
   [7]: http://vimeo.com/bobisbob

## archives

  * [2011][8]
  * [2010][9]
  * [2009][10]
  * [2008][11]

   [8]: http://journal.stuffwithstuff.com/2011/ (2011)
   [9]: http://journal.stuffwithstuff.com/2010/ (2010)
   [10]: http://journal.stuffwithstuff.com/2009/ (2009)
   [11]: http://journal.stuffwithstuff.com/2008/ (2008)

## tags

  * [blog][12] (2)
  * [c#][13] (13)
  * [code][14] (48)
  * [cpp][15] (7)
  * [design][16] (3)
  * [f#][17] (2)
  * [finch][18] (3)
  * [game-dev][19] (6)
  * [game-patterns][20] (3)
  * [go][21] (2)
  * [jasic][22] (1)
  * [java][23] (10)
  * [javascript][24] (3)
  * [language][25] (29)
  * [magpie][26] (19)
  * [optimization][27] (1)
  * [oscon][28] (1)
  * [parsing][29] (7)
  * [politics][30] (1)
  * [python][31] (2)
  * [roguelike][32] (2)
  * [ruby][33] (1)
  * [sml][34] (1)
  * [visualization][35] (1)

   [12]: http://journal.stuffwithstuff.com/category/blog/ (View all posts filed under blog)
   [13]: http://journal.stuffwithstuff.com/category/c/ (View all posts filed under c#)
   [14]: http://journal.stuffwithstuff.com/category/code/ (View all posts filed under code)
   [15]: http://journal.stuffwithstuff.com/category/cpp/ (View all posts filed under cpp)
   [16]: http://journal.stuffwithstuff.com/category/design/ (View all posts filed under design)
   [17]: http://journal.stuffwithstuff.com/category/f/ (View all posts filed under f#)
   [18]: http://journal.stuffwithstuff.com/category/finch/ (View all posts filed under finch)
   [19]: http://journal.stuffwithstuff.com/category/game-dev/ (View all posts filed under game-dev)
   [20]: http://journal.stuffwithstuff.com/category/game-patterns/ (View all posts filed under game-patterns)
   [21]: http://journal.stuffwithstuff.com/category/go/ (View all posts filed under go)
   [22]: http://journal.stuffwithstuff.com/category/jasic/ (View all posts filed under jasic)
   [23]: http://journal.stuffwithstuff.com/category/java/ (View all posts filed under java)
   [24]: http://journal.stuffwithstuff.com/category/javascript/ (View all posts filed under javascript)
   [25]: http://journal.stuffwithstuff.com/category/language/ (View all posts filed under language)
   [26]: http://journal.stuffwithstuff.com/category/magpie/ (View all posts filed under magpie)
   [27]: http://journal.stuffwithstuff.com/category/optimization/ (View all posts filed under optimization)
   [28]: http://journal.stuffwithstuff.com/category/oscon/ (View all posts filed under oscon)
   [29]: http://journal.stuffwithstuff.com/category/parsing/ (View all posts filed under parsing)
   [30]: http://journal.stuffwithstuff.com/category/politics/ (View all posts filed under politics)
   [31]: http://journal.stuffwithstuff.com/category/python/ (View all posts filed under python)
   [32]: http://journal.stuffwithstuff.com/category/roguelike/ (View all posts filed under roguelike)
   [33]: http://journal.stuffwithstuff.com/category/ruby/ (View all posts filed under ruby)
   [34]: http://journal.stuffwithstuff.com/category/sml/ (View all posts filed under sml)
   [35]: http://journal.stuffwithstuff.com/category/visualization/ (View all posts filed under visualization)

## info

  * [famfamfam][36] provides icons
  * [RSS][37] syndicates me
  * [WordPress][38] powers me

   [36]: http://famfamfam.com/lab/icons/silk/
   [37]: feed:http://journal.stuffwithstuff.com/feed/
   [38]: http://wordpress.org/

## [Stupid Magpie Tricks (Or: Yes, I'm Making a Programming Language Like
Everyone Else)][39]

   [39]: http://journal.stuffwithstuff.com/2009/04/26/stupid-magpie-tricks-or-yes-im-making-a-programming-language-like-everyone-else/ (Stupid Magpie Tricks (Or: Yes, I&#8217;m Making a Programming Language Like Everyone Else))

[code][40] | [language][41] | [magpie][42] [2009][43] / [04][44] / [26][45]

   [40]: http://journal.stuffwithstuff.com/category/code/ (View all posts in code)
   [41]: http://journal.stuffwithstuff.com/category/language/ (View all posts in language)
   [42]: http://journal.stuffwithstuff.com/category/magpie/ (View all posts in magpie)
   [43]: http://journal.stuffwithstuff.com/2009/ (year)
   [44]: http://journal.stuffwithstuff.com/2009/04/ (month)
   [45]: http://journal.stuffwithstuff.com/2009/04/26/

This blog has been collecting dust for several months now. Not because I
haven't been doing anything, quite the opposite. I've been spending all my
free time hacking on a little programming language project: Magpie.

Yesterday, I finally [put it online where people can get to it][46]. Feel free
to have a look, although it's got a good ways to go before I'd describe it as
really useful.

   [46]: http://bitbucket.org/munificent/magpie/

I hate "general announcement" blog posts, especially on my blog because it's
not like people read this just to find out what _I'm_ doing, so to try to make
this at least a little bit interesting, here's some stupid Magpie tricks:
things that are doable or easy in Magpie that can be a pain in other
languages.

### Constructor Function References

In Magpie, almost everything is a function, including constructors. Since it
doesn't have an explicit `new` keyword, you can pass around a reference to a
constructor like you can any other function.



    // define a type
    struct Point
        X Int
        Y Int
    end

    Main (->)
        // pass the constructor to a function
        TakeRef fn Point (Int, Int)
    end

    TakeRef (func fn (Int, Int -> Point))
        // call the ref
        def point <- func (1, 2)

        Print (point.X.String + ", " + point.Y.String)
    end

Try _that_ C# and C++!

### Tupled Arguments

Functions in Magpie always take a single argument. To pass in multiple
arguments, you use a tuple. Syntactically, it looks the same as other
languages, but does have an interesting side-effect: you treat the entire
batch of arguments as a single value to be played with:



    // define a function that takes three args
    Sum (a Int, b Int, c Int -> Int) a + b + c

    Main (->)
        // calling it looks pretty normal...
        def a <- Sum (1, 2, 3)

        // but you can also do this
        def arg1 <- (1, 2, 3)
        def sum1 <- Sum arg1
        Print sum1.String

        // or this
        def arg2 <- GetArgs
        def sum2 <- Sum arg2
        Print sum2.String
    end

    // this function returns a tuple
    GetArgs (-> (Int, Int, Int)) (4, 5, 6)

### Is That It?

I know, I know. Not exactly mind-blowing. There's still lots of work for me to
do on the language, but it's getting there. At the very least, there's a
pretty readable hand-coded lexer and LL parser in there.

Discuss this at one of the sites below (or another of your choice):

[ ![][47]][48]

   [47]: http://cdn.stumble-upon.com/images/120x20_su_white.gif
   [48]: http://www.stumbleupon.com/submit?url=http://journal.stuffwithstuff.com%26title%3DThe%2BArticle%2BTitle

If you want to contact me directly, feel free to email at "name@site" where
"name" is "robert" and "site" is "stuffwithstuff.com".

(C) 2008-2009 Robert Nystrom


