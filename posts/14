# [journal.

stuffwithstuff.com][1]

   [1]: http://journal.stuffwithstuff.com/

## me

  * [bob nystrom][2] is me
  * [bitbucket][3] has code
  * [github][4] has code
  * [flickr][5] has photos
  * [twitter][6] has status
  * [vimeo][7] has video

   [2]: http://www.stuffwithstuff.com/bob-nystrom.html
   [3]: http://bitbucket.org/munificent/
   [4]: http://github.com/munificent/
   [5]: http://www.flickr.com/photos/bobisbob/
   [6]: http://twitter.com/munificentbob
   [7]: http://vimeo.com/bobisbob

## archives

  * [2011][8]
  * [2010][9]
  * [2009][10]
  * [2008][11]

   [8]: http://journal.stuffwithstuff.com/2011/ (2011)
   [9]: http://journal.stuffwithstuff.com/2010/ (2010)
   [10]: http://journal.stuffwithstuff.com/2009/ (2009)
   [11]: http://journal.stuffwithstuff.com/2008/ (2008)

## tags

  * [blog][12] (2)
  * [c#][13] (13)
  * [code][14] (48)
  * [cpp][15] (7)
  * [design][16] (3)
  * [f#][17] (2)
  * [finch][18] (3)
  * [game-dev][19] (6)
  * [game-patterns][20] (3)
  * [go][21] (2)
  * [jasic][22] (1)
  * [java][23] (10)
  * [javascript][24] (3)
  * [language][25] (29)
  * [magpie][26] (19)
  * [optimization][27] (1)
  * [oscon][28] (1)
  * [parsing][29] (7)
  * [politics][30] (1)
  * [python][31] (2)
  * [roguelike][32] (2)
  * [ruby][33] (1)
  * [sml][34] (1)
  * [visualization][35] (1)

   [12]: http://journal.stuffwithstuff.com/category/blog/ (View all posts filed under blog)
   [13]: http://journal.stuffwithstuff.com/category/c/ (View all posts filed under c#)
   [14]: http://journal.stuffwithstuff.com/category/code/ (View all posts filed under code)
   [15]: http://journal.stuffwithstuff.com/category/cpp/ (View all posts filed under cpp)
   [16]: http://journal.stuffwithstuff.com/category/design/ (View all posts filed under design)
   [17]: http://journal.stuffwithstuff.com/category/f/ (View all posts filed under f#)
   [18]: http://journal.stuffwithstuff.com/category/finch/ (View all posts filed under finch)
   [19]: http://journal.stuffwithstuff.com/category/game-dev/ (View all posts filed under game-dev)
   [20]: http://journal.stuffwithstuff.com/category/game-patterns/ (View all posts filed under game-patterns)
   [21]: http://journal.stuffwithstuff.com/category/go/ (View all posts filed under go)
   [22]: http://journal.stuffwithstuff.com/category/jasic/ (View all posts filed under jasic)
   [23]: http://journal.stuffwithstuff.com/category/java/ (View all posts filed under java)
   [24]: http://journal.stuffwithstuff.com/category/javascript/ (View all posts filed under javascript)
   [25]: http://journal.stuffwithstuff.com/category/language/ (View all posts filed under language)
   [26]: http://journal.stuffwithstuff.com/category/magpie/ (View all posts filed under magpie)
   [27]: http://journal.stuffwithstuff.com/category/optimization/ (View all posts filed under optimization)
   [28]: http://journal.stuffwithstuff.com/category/oscon/ (View all posts filed under oscon)
   [29]: http://journal.stuffwithstuff.com/category/parsing/ (View all posts filed under parsing)
   [30]: http://journal.stuffwithstuff.com/category/politics/ (View all posts filed under politics)
   [31]: http://journal.stuffwithstuff.com/category/python/ (View all posts filed under python)
   [32]: http://journal.stuffwithstuff.com/category/roguelike/ (View all posts filed under roguelike)
   [33]: http://journal.stuffwithstuff.com/category/ruby/ (View all posts filed under ruby)
   [34]: http://journal.stuffwithstuff.com/category/sml/ (View all posts filed under sml)
   [35]: http://journal.stuffwithstuff.com/category/visualization/ (View all posts filed under visualization)

## info

  * [famfamfam][36] provides icons
  * [RSS][37] syndicates me
  * [WordPress][38] powers me

   [36]: http://famfamfam.com/lab/icons/silk/
   [37]: feed:http://journal.stuffwithstuff.com/feed/
   [38]: http://wordpress.org/

## [One and Only One][39]

   [39]: http://journal.stuffwithstuff.com/2009/05/05/one-and-only-one/ (One and Only One)

[code][40] | [language][41] | [magpie][42] [2009][43] / [05][44] / [05][45]

   [40]: http://journal.stuffwithstuff.com/category/code/ (View all posts in code)
   [41]: http://journal.stuffwithstuff.com/category/language/ (View all posts in language)
   [42]: http://journal.stuffwithstuff.com/category/magpie/ (View all posts in magpie)
   [43]: http://journal.stuffwithstuff.com/2009/ (year)
   [44]: http://journal.stuffwithstuff.com/2009/05/ (month)
   [45]: http://journal.stuffwithstuff.com/2009/05/05/

My little language [Magpie][46] has a feature that may at first seem really
limiting: _all functions take exactly one argument and return one value, no
more, no less._ I'll try to explain why I made that choice, and some of the
surprising benefits of it.

   [46]: http://bitbucket.org/munificent/magpie/

It feels weird explaining a programming language that literally no one on
Earth is using, but my hope is that in the future people _will_ be using
Magpie, and this might come in handy. At the very least, it'll help me
remember where I'm at.

First off, a quick primer in Magpie syntax. Here's a function to square a
number:



    Square (n Int -> Int) n * n


The name comes first, followed by the type signature in parentheses. To the
left of the `->` is the argument, to the right is the return type. The body of
the function is the single expression `n * n`. Like Ruby and most functional
languages, returning is implicit: a function returns the result of evaluating
its body.

You can call it like this:



    Square 3 // returns 9


Unlike C and other languages, function arguments aren't put inside
parentheses.

### So what if I want to pass in multiple args?

That's easy. Here's a function to multiply three numbers:



    Mult (a Int, b Int, c Int -> Int) a * b * c


You can call it like:



    Mult (2, 3, 4) // returns 24


### Hey! I thought you said functions always take one argument!

They do, they do. However, Magpie also supports [tuples][47]. A tuple lets you
make a single value by combining others together. In Magpie, tuples are
created using the comma operator:


       [47]: http://en.wikipedia.org/wiki/Tuple

    (1, 2)             // a tuple of two Int fields
    (2, true, "three") // a tuple of three fields of different type


(They are also placed inside parentheses, but you can more or less ignore
that. It's more for precedence reasons than anything else. The comma is where
the magic is.)

So, when you see a call like `Mult (2, 3, 4)` what you're really seeing is
calling `Mult` with a single argument, the tuple `(2, 3, 4)`.

### Are you just playing semantics?

No, this isn't just a semantic trick. `Mult` really does take a single value.
I'll prove it:



    // create a local variable and assign a tuple to it
    def arg <- (2, 3, 4)

    // pass the single argument to the function
    Mult arg


This is perfectly legit in Magpie and doesn't require function overloading or
anything. In fact, this is kind of useful. When you start playing with
function references (i.e. callbacks), it's really convenient to be able to
pass around arguments to functions without needing to distinguish between how
many arguments it takes: it always takes one.

### Neat trick. What about functions with no arguments?

That actually uses tuples too, sort of. You can make a tuple out of any number
of values, including one and zero. A single value _is_ a one-value tuple (a
monuple?). But you can also have a tuple with _no_ values, strange as that
sounds. There's exactly one of them (how could there be different ones?) It's
called "Unit", and looks like `()`. So if you had a function like this:



    SayHi (->) Print "hi!"


You could call it like this:



    SayHi () // prints "hi"


That's a bit tedious, though, so in most cases you can omit the `()` and
Magpie will infer it:



    SayHi // prints "hi"


### What about returns? I don't see Print returning anything.

Sure, it is. Just like Unit can be omitted as an argument, it's also omitted
as a return. `Print` returns `()` every time it's called. Since a function
returns the result of evaluating its body, that means `SayHi` also returns
`()`.

### What's the point?

What that gives us is the ability to make everything in Magpie an expression:
since you can return Unit like a value, Magpie doesn't need to make a
distinction between _expressions_ (which return things) and _statements_
(which don't). This means that things like flow control can be regular
expressions in Magpie. For example:



    Square (if 1 < 2 then 3 else 4)


This calls the `Square` function and passes in 3. We can do this because
`if/then/else` is a regular expression and can be used anywhere.

So having "nothing" be a returnable value lets us make the language a lot more
flexible.

### You still forgot one caseâ€¦

And, of course, this also means you can return _multiple_ values, just like
you can in Python or Lua:



    Swap (a Int, b Int -> (Int, Int)) (b, a)

    Swap (1, 2) // returns (2, 1)


So, in the end, it isn't much of a limitation at all.

Discuss this at one of the sites below (or another of your choice):

[ ![][48]][49]

   [48]: http://cdn.stumble-upon.com/images/120x20_su_white.gif
   [49]: http://www.stumbleupon.com/submit?url=http://journal.stuffwithstuff.com%26title%3DThe%2BArticle%2BTitle

If you want to contact me directly, feel free to email at "name@site" where
"name" is "robert" and "site" is "stuffwithstuff.com".

(C) 2008-2009 Robert Nystrom


