The luxury of having <a href="http://magpie.stuffwithstuff.com/">a programming language with zero users</a> is that I can make <a href="https://github.com/munificent/magpie/commit/e509e13fd74ba252faf00288196769412cf7811c">radical changes</a> to it with impunity. Over the past month, I've done just that. I've been thinking about both multimethods and multiple inheritance for a long time, but I couldn't figure out how to make them work. They both finally clicked together: I found a way to use each to solve my problems with the other.

With those stumbling blocks behind me, I was free to rebuild the language into a form I've really wanted it to have since I started. Where Magpie used to be a more typical <a href="http://c2.com/cgi/wiki?SingleDispatch">single-dispatch</a> single-inheritance OOP language, it's now much closer to <a href="http://en.wikipedia.org/wiki/Common_Lisp_Object_System">CLOS</a>.

This is a fundamental change to the language: every time you call a method, you're going through totally different machinery to figure out what code gets executed. What I'm really excited about is that I feel like the language is more powerful now and yet simpler.

Since not a lot of people know anything about multimethods (and I'm still learning!), and most people these days think multiple inheritance is in the same category as punching children and littering, I thought it might be worth running through how and why I added them. If I can, I'll show you some fun stuff that gets a lot easier when you have them.
<h2>What's Multiple Inheritance?</h2>
If you've played with C++, you're at least passingly familiar with multiple inheritance. It's exactly like it sounds: a class can inherit from multiple base classes. All of the methods and properties on the base classes are available on the new derived one.

This is strictly more expressive than single inheritance. Single inheritance gets you pretty far, but I find it leads to deeper inheritance chains, more redundancy, and more brittleness. With multiple inheritance, you're free to split classes into small chunks of well-defined behavior and then recompose them at will. <a href="http://journal.stuffwithstuff.com/2011/02/21/multiple-inheritance-in-javascript/">This post</a>, I hope, gives you a good idea of what I have in mind here.
<h2>What's the Problem?</h2>
It's not all rosy though, as anyone whose sliced their hand open on the <a href="http://en.wikipedia.org/wiki/Deadly_Diamond_of_Death">deadly diamond of death</a> can tell you. Here are a couple of problems that you can run into:
<h3>Is State Duplicated or Not?</h3>
Let's say you're making a game. You've got classes for the things in the world: monsters, magical items, etc. Lots of things in the world have a position, so you make a base class for that:
<pre class="cpp:nogutter:nocontrols">class Positioned {
public:
  int x;
  int y;
}</pre>
Then you derive classes for items and monsters:
<pre class="cpp:nogutter:nocontrols">class Item : public Positioned {
  // stuff...
}

class Monster : public Positioned {
  // stuff...
}</pre>
Groovy. Then you decide to add a <a href="http://wiki.ffxiclopedia.org/wiki/Treasure_Chest_%28Monster%29">living treasure chest monster</a> to attack the unwary:
<pre class="cpp:nogutter:nocontrols">class ChestMonster : public Monster, public Item {
  // stuff...
}</pre>
Pop quiz! Does our <code>ChestMonster</code> have one <code>x</code> field or two? I've coded a lot of C++ and I honestly don't know the answer. Either way it's bad.

If it gets two sets of position, one for each path in the class hierarchy, then how do you know which one you're getting when you access <code>x</code> on an instance of <code>ChestMonster</code>? If it just gets one <code>x</code>, what happens if the constructors for <code>Item</code> and <code>Monster</code> try to pass different values for it when they call the constructor for <code>Positioned</code> from their constructor? Who wins?
<h3>Which Override Wins?</h3>
Now let's expand our previous example. Let's say there's a virtual method in <code>Positioned</code> so that a derived class can say whether or not a given position is valid. Something like:
<pre class="cpp:nogutter:nocontrols">class Positioned {
protected:
  bool isPositionValid(int x, int y) = 0;
}</pre>
This way, derived classes can handle things like ghosts that can walk through walls or items that float on water. So <code>Item</code> and <code>Monster</code> both override it. When it gets called from an instance of <code>ChestMonster</code>, which one wins?

There probably <em>is</em> an answer here, but even if it's unambiguous to the language, it's confusing for the user.
<h3>Other Problems...</h3>
There are some other annoyances too. Multiple inheritance means you need syntax for calling all of your base class constructors, which is a bit more complex than Java's simple <code>super(...)</code>.

When we get to multimethods, we'll see that linearization is trickier in multiple inheritance. The <a href="http://192.220.96.201/dylan/linearization-oopsla96.html">C3 linearization algorithm</a>, developed for <a href="http://www.opendylan.org/">Dylan</a>, is the canonical solution, I think, but it's not what I'd call simple.

These problems are scary enough that language designers ran away. Java, C# and JavaScript only allow single inheritance. Other languages deal with this by providing limited forms of multiple inheritance. Ruby has mixins. Scala has traits.
<h3>A Solution?</h3>
After reading a bunch, I convinced myself that almost all of the problems with multiple inheritance come from there being multiple paths to the same base class. Duplicate state, ambiguous overrides, and even C3's complexity have a lot to do with inheriting the same class twice.

Why not just disallow that?

So my idea for Magpie was that you could inherit from multiple classes, but you could never inherit from the same class twice either directly or indirectly. In other words, the family tree leading to a given class must always be a <em>tree</em> and never a graph. No deadly diamond. Problem solved!
<h3>The Root of the Problem</h3>
Well, not quite. You see most OOP languages have a root class (the <a href="http://en.wikipedia.org/wiki/Top_type">top type</a> for you type system folks), usually called something like <code>Object</code>. This is the class that all classes inherit from. That means <em>every</em> class hierarchy is a graph: they always connect back to <code>Object</code> at the top.

We could just ditch that concept (C++ does), but a root class is really useful. There are some operations that are valid on pretty much everything. Think <code>toString()</code>, <code>getHashCode()</code>, and <code>equals()</code>. Without a root class, there's no place to hang methods like that.

I got stuck on this issue for months. In the meantime, I started learning more about multimethods.
<h2>Multi-what?</h2>
Multimethods, like <a href="http://en.wikipedia.org/wiki/Pattern_matching">pattern matching</a>, are a language puzzle to me. They are <em>so awesome</em> and yet so <em>few</em> languages support them. People are finally starting to catch on to pattern matching, but the set of languages that support multimethods can still fit in your hand: Common Lisp, through <a href="http://www.dreamsongs.com/CLOS.html">CLOS</a>; <a href="http://www.opendylan.org/">Dylan</a> (mostly dead but maybe being resurrected now?), and the still nascent <a href="http://slatelanguage.org/">Slate</a> language.

If you've never heard of multimethods, the basic idea is pretty simple though a bit confusing if you come from a single-dispatch (i.e. C++, Java, C#, Smalltalk, et. al.) background. These languages do runtime dispatch only on the receiver, using the term "overriding":
<pre class="cpp:nogutter:nocontrols">class Base {
public:
  virtual void method() { printf("Base!"); }
}

class Derived : public Base {
public:
  virtual void method() { printf("Derived!"); }
}

// Later...
Base* obj = new Derived();
obj-&gt;method(); // prints "Derived!"</pre>
The last line is the key bit. Even though <code>obj</code> is a pointer of type <code>Base</code>, at <em>runtime</em> it looks up the actual class of the object being pointed to and finds the right method for it.

This is in contrast with over<em>loading</em> which is only static in those languages. Let's see:
<pre class="cpp:nogutter:nocontrols">void method(Base* obj) { printf("Base!"); }
void method(Derived* obj) { printf("Derived!"); }

// Later...
Base* obj = new Derived();
method(obj);</pre>
Does this also print <code>"Derived!"</code>? Alas, no. With function arguments, the overloaded function is chosen at <em>compile</em> time. Since the compiler only knows that <code>obj</code> is of type <code>Base*</code>, it binds the call to the version of <code>overloaded()</code> that expects that. At runtime, the actual class of the object that <code>obj</code> points to is ignored.
<h3>The Receiver Argument</h3>
When we see a chunk of code like <code>collection.add("item")</code>, we tend to think of <code>collection</code> and <code>"item"</code> as being fundamentally different from each other. But really, they're just two arguments being passed to <code>add()</code>. It's just that one happens to appear to the left of the method name. It could just as easily be <code>add(collection, "item")</code> (which is exactly how it would be in C or Lisp more or less).

From that perspective, single dispatch seems weird. You've got this special behavior that only applies to the first argument passed to every method (<code>this</code>), and the other arguments are second-class citizens.

Multiple dispatch fixes that. In a language with multiple dispatch, the <em>runtime</em> types of <em>all</em> arguments are used to select the actual method that gets called when given a set of overloads. If C++ supported multiple dispatch, then this...
<pre class="cpp:nogutter:nocontrols">void method(Base*    a, Base*    b) { printf("base base"); }
void method(Base*    a, Derived* b) { printf("base derived"); }
void method(Derived* a, Base*    b) { printf("derived base"); }
void method(Derived* a, Derived* b) { printf("derived derived"); }

// Later...
Base* a = new Derived();
Base* b = new Derived();
method(a, b);</pre>
...would print <code>"derived derived"</code> even though the <em>static</em> types of <code>a</code> and <code>b</code> are just <code>Base*</code>.
<h3>What's the Problem?</h3>
I'll give a stronger sales pitch for multiple dispatch later, but I hope you can see already that multiple dispatch is more general and more expressive than single dispatch. But it isn't easy.

The problem is what's called <em>linearization</em>. Given a set of overloaded methods (like our four examples above) and a set of actual arguments, which method wins and actually gets called?

In our example here, it's pretty obvious. Derived classes take precedence over base ones, so the derived-most overload wins. There are some pathological cases that are nasty, though:
<pre class="cpp:nogutter:nocontrols">void method(Base*    a, Derived* b) { printf("base derived"); }
void method(Derived* a, Base*    b) { printf("derived base"); }

// Later...
Base* a = new Derived();
Base* b = new Derived();
method(a, b);</pre>
Which one should win? There really isn't a right answer here. I guess every time you call that method, the runtime would have to email the original author of the code and be all "dude, what did you want this to do?"

But ignoring pathological cases, linearization is still tricky, which a perusal of the C3 algorithm should convince you of. Take a look at some of the <a href="http://www.python.org/download/releases/2.3/mro/">explanatory examples that Python uses</a> and report back to me.
<h2>You Scratch My Back, I'll Scratch Yours</h2>
If you look at that Python page, you'll notice that most of the pathological examples have something in common: <em>multiple paths to the same base class.</em> The original problem with multiple inheritance is back!

But this is great news, because it means that our trick of not allowing inheriting the same class twice will also dramatically simplify linearization of multimethods.

Can multimethods in turn help us out with our root class problem? Indeed, they can! When you define a method in a language that supports multimethods, you provide a pattern that describes the arguments that method accepts. For example (finally switching to Magpie syntax), a method like this:
<pre class="magpie:nogutter:nocontrols">def overloaded(a Base, b Derived) print("base derived")</pre>
Will match a first argument of type <code>Base</code> (or a subclass of it) and a second of type <code>Derived</code> (again, or a subclass). They say that this method is <em>specialized</em> to those types.

But it isn't necessary to specialize an argument at all. A type pattern is just one kind of pattern. You can also define a method like this:
<pre class="magpie:nogutter:nocontrols">def overloaded(a, b) print("who knows?!")</pre>
Here, <code>a</code> and <code>b</code> aren't specialized to a class at all, which means this method matches <em>any</em> pair of arguments. A method that is applicable to an object of any class? Sounds an awful lot like what we'd want something like <code>toString()</code> or <code>getHashCode()</code> to work on.

Problem solved. We don't need a root class. We'll just use unspecialized methods instead.
<h2>The Core of a Language</h2>
This is the new core of Magpie. Classes can inherit from multiple base classes, as long as there is no overlap, and all methods are defined outside of the class as multimethods. This is very close to how CLOS works. But there's a little sugar I've added.

With multimethods, all arguments including the "receiver" are just regular arguments, so there's no special <em>this</em>. That implies just using a normal non-OOP-style function call syntax. For example, this in C++:
<pre class="cpp:nogutter:nocontrols">planner.getAddressBook().getPhoneNumbers().add("867-5309");</pre>
Would look something like this in CLOS:
<pre>(add (get-phone-numbers (get-address-book planner)) "867-5309")</pre>
Maybe it's just me, but I find that hard to read. My experience is that most operations tend to have one argument that <em>is</em> kind of special. Putting it to the left of the operation makes it easier to read the code from left-to-right. It also gives a hint as to which arguments are likely to be most strongly affected by the call. So the above in Magpie would be:
<pre class="magpie:nogutter:nocontrols">planner addressBook phoneNumbers add("867-5309")</pre>
Semantically, it's pure multiple dispatch. <em>Syntactically</em>, you can specify that an argument appears to the left of the method, to the right, or both. A getter, like <code>addressBook</code> in <code>planner addressBook</code> is just a method with one argument that appears to the left. A method call like <code>add</code> in <code>phoneNumbers add("867-5309")</code> has arguments on both sides. And a straight function call like <code>print("hi")</code> just has an argument to the right.

I'm still poking at the syntax, but so far I really like it. You get flexibility over how your code reads but the uniform semantics of multiple dispatch.
<h2>The Sales Pitch</h2>
If you've made it this far, I'll try to reward you. Through all of this, I haven't really shown what's cool about multimethods. Why go through all this trouble? Here's why...
<h3>Overloading in a Dynamic Language</h3>
Since most dynamic languages don't have any concept of annotating a method's expected types, that generally rules out the ability to overload at all. That's a shame since lots of methods are nicely defined in terms of optional arguments, or arguments of different types.

For a real world example, consider the magic <code>$()</code> function in <a href="http://jquery.com/">jQuery</a>. It's <a href="http://api.jquery.com/jQuery/">documented like this</a>:
<blockquote><code>$( selector, [ context ] )</code>

<code>selector</code> A string containing a selector expression

<code>context</code> A DOM Element, Document, or jQuery to use as context

<code>$( element )</code>

<code>element</code> A DOM element to wrap in a jQuery object.

<code>$( elementArray )</code>

<code>elementArray</code> An array containing a set of DOM elements to wrap in a jQuery object.

<code>$( jQuery object )</code>

<code>jQuery</code> object An existing jQuery object to clone.

<code>$()</code></blockquote>
Those look an awful lot like overloads, which Javascript doesn't support. How do they do this? By making <a href="https://github.com/jquery/jquery/blob/master/src/core.js#L70">one monolithic function</a> with a slew of <code>instanceof</code> checks interspersed throughout it. Eek!

In Magpie you can just do:
<pre class="magpie:nogutter:nocontrols">def $(selector String) ...
def $(selector String, context) ...
def $(element Element) ...
def $(elementArray List) ...
def $(object JQuery) ...
def $() ...</pre>
The language itself will then take care of picking the appropriate method for you and doing all of the <code>instanceof</code> checks and variable binding itself. The nice thing about that is that it happens atomically. You don't have to worry about bugs where you <em>think</em> <code>selector</code> is a string, but you forgot the <code>instanceof</code> check. If it picks the first method up there, you know for certain <code>selector</code> will be a string.
<h3>Binary Operators</h3>
Magpie doesn't have built-in operators, so you're free to define your own and overload existing ones (but, for the love of God, please don't go <a href="http://jim-mcbeath.blogspot.com/2008/12/scala-operator-cheat-sheet.html">all Scala on it</a>). Multimethods are a big help here.

A simple example is <code>!=</code>. In C# and C++ when you overload <code>==</code>, you have to remember to also overload <code>!=</code> since that's also a method on the class you're overloading it for. In Magpie, a single definition of <code>!=</code> serves to cover all cases:
<pre class="magpie:nogutter:nocontrols">def (left) != (right)
    not(left == right)
end</pre>
Now if you overload <code>==</code>, you get <code>!=</code> for free.

Another example is <code>+</code>. Magpie uses it for both numeric addition and string contenation. Many languages have to build that directly into the language to get that overloading to work right. In Magpie, it's just:
<pre class="magpie:nogutter:nocontrols">def (left Int) + (right Int) ...
def (left) + (right) concatenate(left string, right string)</pre>
If both arguments are ints, the first method wins and you get addition. Otherwise, it calls the <code>string</code> method on the two arguments and concatenates.
<h3>Value Patterns</h3>
We've covered methods that specialize on types and ones that allow an argument of any type. There's another flavor of pattern too: <em>value patterns</em>. Those let you define methods that only match on specific argument values. Consider the venerable Fibonacci function. With value patterns, you can implement it like this:
<pre class="magpie:nogutter:nocontrols">def fib(0) 0
def fib(1) 1
def fib(n Int) fib(n - 2) + fib(n - 1)</pre>
Note that the order these are defined doesn't matter. The linearization algorithm takes care of picking the first two methods for those values of <code>n</code>: a value pattern always wins over a type pattern.

Value patterns turn out to be a perfect fit for a surprising problem: static methods. Most OOP languages let you define methods that don't work on an <em>instance</em> of a class, but instead on the class itself. In C++/C#/Java these are called "static", for example:
<pre class="java:nogutter:nocontrols">Integer.parseInt("123");</pre>
Static OOP languages handle this by having built-in special support for static methods. In Smalltalk, classes are <a href="http://en.wikipedia.org/wiki/First-class_object">first class</a>. That means a class is just another object you can pass around. It handles "static" methods by making them regular <em>instance</em> methods on the class <em>of the class object itself</em>: its <a href="http://www.ifi.uzh.ch/richter/Classes/oose2/05_Metaclasses/02_smalltalk/02_metaclasses_smalltalk.html">metaclass</a>.

That means for every class, (say <code>Int</code>) there's a corresponding metaclass (<code>IntMetaclass</code>). When you call a method on an int, like <code>123 sqrt()</code> it finds that method on the <code>Int</code> class. When you call a method on <code>Int</code> itself, like <code>Int parse("123")</code>, it finds that on the <em>meta</em>class.

Classes are first class in Magpie too, so it worked that way for a while. That meant making a pair of classes for each class and <a href="http://en.wikipedia.org/wiki/File:Smalltalk_80_metaclasses.svg">a fairly confusing metaclass hierarchy</a>.

With multimethods, that all <a href="https://github.com/munificent/magpie/commit/424b2724af47fffc426c1e432c8fae051ce3a0d1#L6L18">just goes away</a>. Instead, a "static" method is just a method that matches on a class <em>by value</em>:
<pre class="magpie:nogutter:nocontrols">def (Int) parse(text String) ...</pre>
The <code>(Int)</code> pattern here means we match on <code>Int</code> by value as opposed to <code>(variableName Int)</code> which means to match on it by type. (The syntax here still needs some work...)

With that, I can ditch metaclasses completely. Things like constructors just become multimethods that specialize to class values for their left-hand argument.
<h3>Safely Extensible Classes</h3>
Finally, we get to the last bit, the real reason I wanted to add multimethods in the first place. Before I started working on Magpie, I spent most of my time in C#. One of my favorite features is <a href="http://journal.stuffwithstuff.com/2008/02/09/c-extension-methods-not-just-for-breakfast/">extension methods</a>. They give you the ability to effectively add new methods to a class without the horrors of monkey-patching.

My motivation is pretty mundane: I think method call syntax is the usually the most readable, and I care deeply about readability. I prefer this:
<pre class="java:nogutter:nocontrols">list.reverse();</pre>
Over this:
<pre class="java:nogutter:nocontrols">Collections.reverse(list);</pre>
But I want to avoid the chaos of monkey-patching. Multimethods are a neat solution to this. With multimethods, the methods aren't directly tied to classes at all. You're perfectly free to define a <code>reverse</code> method like this:
<pre class="magpie:nogutter:nocontrols">def (_ List) reverse() ...</pre>
And then you can call <code>reverse()</code> as it if were a native method on Lists. Because you aren't cracking open the class itself, this is nice and modular. Code that imports the module where you define that will get your <code>reverse()</code> method, and modules that don't won't. If they define their own <code>reverse()</code>, there's no collision. You could even access both within the same module by renaming when you import:
<pre class="magpie:nogutter:nocontrols">import bobs.list.methods reverse = bobs.reverse
import your.list.methods reverse = your.reverse

var list = [1, 2, 3]
list bobs.reverse()
list your.reverse()</pre>
(Here, the <code>.</code> is just part of the method name. It looks funny at first, but hopefully not <em>too</em> funny.)
<h2>What Now?</h2>
I'm still ironing out the kinks with all of this, but so far it looks pretty promising. It's nice to be able to define methods on whatever types you want, and I find multiple inheritance to be a refreshingly effective way to reuse code after years of dealing with single inheritance.

I've still got lots of work and weird edge cases to deal with, though. The syntax for patterns and defining methods is OK but not ideal. There's a couple of ugly corner cases between how multimethods and modules interact.

The two biggest pieces are that in the process of doing this, I yanked a bunch of other code out. It was really hard to get this to work without breaking the other existing features so I just scrapped them. As of today, Magpie no longer has <a href="http://journal.stuffwithstuff.com/2011/02/13/extending-syntax-from-within-a-language/">extensible syntax</a> or <a href="http://journal.stuffwithstuff.com/2010/10/29/bootstrapping-a-type-system/">static checking</a>, previously its two most interesting features. Oops!

Getting the syntax extension stuff working again won't be too much trouble. Getting the type system going again will be a bit of work. When I tore it out, I realized how much code was related just to that and how much complexity a static type system really adds to the language. When I add it back in, I'll try to keep all of that in Magpie (it used to be half Magpie, half directly in the interpreter).

A surprising thing I noticed is that multimethods actually cover some of the utility of static types. With them, I'm still usually annotating the types that methods expect, which is nice for documentation, and I still get the guarantee that a method won't get an unexpected argument.

I still want to get a real type system (or multiple, which is a big motivation for defining it at the library level!) going too, but it's refreshing not having to deal with it for a while. One thing I've learned in the past year is that designing a type system is about ten times harder than designing a language.