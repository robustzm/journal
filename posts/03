# [journal.

stuffwithstuff.com][1]

   [1]: http://journal.stuffwithstuff.com/

## me

  * [bob nystrom][2] is me
  * [bitbucket][3] has code
  * [github][4] has code
  * [flickr][5] has photos
  * [twitter][6] has status
  * [vimeo][7] has video

   [2]: http://www.stuffwithstuff.com/bob-nystrom.html
   [3]: http://bitbucket.org/munificent/
   [4]: http://github.com/munificent/
   [5]: http://www.flickr.com/photos/bobisbob/
   [6]: http://twitter.com/munificentbob
   [7]: http://vimeo.com/bobisbob

## archives

  * [2011][8]
  * [2010][9]
  * [2009][10]
  * [2008][11]

   [8]: http://journal.stuffwithstuff.com/2011/ (2011)
   [9]: http://journal.stuffwithstuff.com/2010/ (2010)
   [10]: http://journal.stuffwithstuff.com/2009/ (2009)
   [11]: http://journal.stuffwithstuff.com/2008/ (2008)

## tags

  * [blog][12] (2)
  * [c#][13] (13)
  * [code][14] (48)
  * [cpp][15] (7)
  * [design][16] (3)
  * [f#][17] (2)
  * [finch][18] (3)
  * [game-dev][19] (6)
  * [game-patterns][20] (3)
  * [go][21] (2)
  * [jasic][22] (1)
  * [java][23] (10)
  * [javascript][24] (3)
  * [language][25] (29)
  * [magpie][26] (19)
  * [optimization][27] (1)
  * [oscon][28] (1)
  * [parsing][29] (7)
  * [politics][30] (1)
  * [python][31] (2)
  * [roguelike][32] (2)
  * [ruby][33] (1)
  * [sml][34] (1)
  * [visualization][35] (1)

   [12]: http://journal.stuffwithstuff.com/category/blog/ (View all posts filed under blog)
   [13]: http://journal.stuffwithstuff.com/category/c/ (View all posts filed under c#)
   [14]: http://journal.stuffwithstuff.com/category/code/ (View all posts filed under code)
   [15]: http://journal.stuffwithstuff.com/category/cpp/ (View all posts filed under cpp)
   [16]: http://journal.stuffwithstuff.com/category/design/ (View all posts filed under design)
   [17]: http://journal.stuffwithstuff.com/category/f/ (View all posts filed under f#)
   [18]: http://journal.stuffwithstuff.com/category/finch/ (View all posts filed under finch)
   [19]: http://journal.stuffwithstuff.com/category/game-dev/ (View all posts filed under game-dev)
   [20]: http://journal.stuffwithstuff.com/category/game-patterns/ (View all posts filed under game-patterns)
   [21]: http://journal.stuffwithstuff.com/category/go/ (View all posts filed under go)
   [22]: http://journal.stuffwithstuff.com/category/jasic/ (View all posts filed under jasic)
   [23]: http://journal.stuffwithstuff.com/category/java/ (View all posts filed under java)
   [24]: http://journal.stuffwithstuff.com/category/javascript/ (View all posts filed under javascript)
   [25]: http://journal.stuffwithstuff.com/category/language/ (View all posts filed under language)
   [26]: http://journal.stuffwithstuff.com/category/magpie/ (View all posts filed under magpie)
   [27]: http://journal.stuffwithstuff.com/category/optimization/ (View all posts filed under optimization)
   [28]: http://journal.stuffwithstuff.com/category/oscon/ (View all posts filed under oscon)
   [29]: http://journal.stuffwithstuff.com/category/parsing/ (View all posts filed under parsing)
   [30]: http://journal.stuffwithstuff.com/category/politics/ (View all posts filed under politics)
   [31]: http://journal.stuffwithstuff.com/category/python/ (View all posts filed under python)
   [32]: http://journal.stuffwithstuff.com/category/roguelike/ (View all posts filed under roguelike)
   [33]: http://journal.stuffwithstuff.com/category/ruby/ (View all posts filed under ruby)
   [34]: http://journal.stuffwithstuff.com/category/sml/ (View all posts filed under sml)
   [35]: http://journal.stuffwithstuff.com/category/visualization/ (View all posts filed under visualization)

## info

  * [famfamfam][36] provides icons
  * [RSS][37] syndicates me
  * [WordPress][38] powers me

   [36]: http://famfamfam.com/lab/icons/silk/
   [37]: feed:http://journal.stuffwithstuff.com/feed/
   [38]: http://wordpress.org/

## [Checking Flags in C# Enums][39]

   [39]: http://journal.stuffwithstuff.com/2008/03/05/checking-flags-in-c-enums/ (Checking Flags in C# Enums)

[c#][40] | [code][41] [2008][42] / [03][43] / [05][44]

   [40]: http://journal.stuffwithstuff.com/category/c/ (View all posts in c#)
   [41]: http://journal.stuffwithstuff.com/category/code/ (View all posts in code)
   [42]: http://journal.stuffwithstuff.com/2008/ (year)
   [43]: http://journal.stuffwithstuff.com/2008/03/ (month)
   [44]: http://journal.stuffwithstuff.com/2008/03/05/

I like C# [enums][45] and I also like using them as [bitfields][46], even
though apparently [not everyone does][47]. I realize they aren't perfectly
typesafe, but then I don't think that's the problem [Abrams][48] and co. were
trying to solve anyway.

   [45]: http://msdn2.microsoft.com/en-us/library/sbbt4032(VS.80).aspx
   [46]: http://msdn2.microsoft.com/en-us/library/system.flagsattribute(VS.80).aspx
   [47]: http://cleveralias.blogs.com/thought_spearmints/2004/01/more_c_enum_wac.html
   [48]: http://blogs.msdn.com/brada/

Here's one:



    [Flags]
    public enum Fruits
    {
        Apple       = 1,
        Banana      = 2,
        Cherry      = 4,
        Date        = 8,
        Eggplant    = 16
    }

Nice, clean syntax. The way they solved C++'s name collision issues with enum
values is genius: `Fruits.Apple`. Clearly these guys are using the old noggin.

### The Annoying Bit (Argh, a Pun)

The one thing that _does_ annoy me about flag enums is the syntax to see if a
given flag (or set of flags) is set:



    if ((myFruit & Fruits.Date) == Fruits.Date)

I'm not afraid of bitwise operators, but there's some serious lameness in
here. Needing to specify the explicit `==` for type safety and having to use
the parenthesis because the operator precedence puts `==` before `&` first?
Gross.

### For Every Nail There is a Hammer

Behold the solution:



    public static class FruitsExtensions
    {
        public static bool IsSet(this Fruits fruits, Fruits flags)
        {
            return (fruits & flags) == flags;
        }
    }

With that, you can just do:



    if (myFruit.IsSet(Fruits.Date))

Much nicer. For kicks, here's some other useful methods:



    public static class FruitsExtensions
    {
        public static bool IsSet(this Fruits fruits, Fruits flags)
        {
            return (fruits & flags) == flags;
        }

        public static bool IsNotSet(this Fruits fruits, Fruits flags)
        {
            return (fruits & (~flags)) == 0;
        }

        public static Fruits Set(this Fruits fruits, Fruits flags)
        {
            return fruits | flags;
        }

        public static Fruits Clear(this Fruits fruits, Fruits flags)
        {
            return fruits & (~flags);
        }
    }

Useful, no?

### Why Solve 1 When You Can Solve n?

So, if you're like me and [this guy][49], right now you're thinking, "This
just fixes one enum. Can I solve it for all enums?" Ideally, you'd do
something like:


       [49]: http://devlicious.com/blogs/christopher_bennage/archive/2007/09/13/my-new-little-friend-enum-lt-t-gt.aspx

    public static class EnumExtensions
    {
        public static bool IsSet<T>(this T value, T flags) where T : Enum
        {
            return (value & flags) == flags;
        }
    }

Unfortunately, that doesn't fly. You can't use `Enum` as a constraint.
Likewise, there's no way to require a typeparam to implement an operator (like
"&" above). You _can_ implement a generic solution for this:



    public static class EnumExtensions
    {
        public static bool IsSet<T>(this T value, T flags) where T : struct
        {
            Type type = typeof(T);

            // only works with enums
            if (!type.IsEnum) throw new ArgumentException(
                "The type parameter T must be an enum type.");

            // handle each underlying type
            Type numberType = Enum.GetUnderlyingType(type);

            if (numberType.Equals(typeof(int)))
            {
                return BoxUnbox<int>(value, flags, (a, b) => (a & b) == b);
            }
            else if (numberType.Equals(typeof(sbyte)))
            {
                return BoxUnbox<sbyte>(value, flags, (a, b) => (a & b) == b);
            }
            else if (numberType.Equals(typeof(byte)))
            {
                return BoxUnbox<byte>(value, flags, (a, b) => (a & b) == b);
            }
            else if (numberType.Equals(typeof(short)))
            {
                return BoxUnbox<short>(value, flags, (a, b) => (a & b) == b);
            }
            else if (numberType.Equals(typeof(ushort)))
            {
                return BoxUnbox<ushort>(value, flags, (a, b) => (a & b) == b);
            }
            else if (numberType.Equals(typeof(uint)))
            {
                return BoxUnbox<uint>(value, flags, (a, b) => (a & b) == b);
            }
            else if (numberType.Equals(typeof(long)))
            {
                return BoxUnbox<long>(value, flags, (a, b) => (a & b) == b);
            }
            else if (numberType.Equals(typeof(ulong)))
            {
                return BoxUnbox<ulong>(value, flags, (a, b) => (a & b) == b);
            }
            else if (numberType.Equals(typeof(char)))
            {
                return BoxUnbox<char>(value, flags, (a, b) => (a & b) == b);
            }
            else
            {
                throw new ArgumentException("Unknown enum underlying type " +
                    numberType.Name + ".");
            }
        }

        ///
        /// Helper function for handling the value types. Boxes the params to
        /// object so that the cast can be called on them.
        ///
        private static bool BoxUnbox<T>(object value, object flags, Func<T, T, bool> op)
        {
            return op((T)value, (T)flags);
        }
    }

â€¦but, yeah, not exactly fun using reflection for this.

Discuss this at one of the sites below (or another of your choice):

[ ![][50]][51]

   [50]: http://cdn.stumble-upon.com/images/120x20_su_white.gif
   [51]: http://www.stumbleupon.com/submit?url=http://journal.stuffwithstuff.com%26title%3DThe%2BArticle%2BTitle

If you want to contact me directly, feel free to email at "name@site" where
"name" is "robert" and "site" is "stuffwithstuff.com".

(C) 2008-2009 Robert Nystrom


