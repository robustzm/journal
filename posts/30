# [journal.

stuffwithstuff.com][1]

   [1]: http://journal.stuffwithstuff.com/

## me

  * [bob nystrom][2] is me
  * [bitbucket][3] has code
  * [github][4] has code
  * [flickr][5] has photos
  * [twitter][6] has status
  * [vimeo][7] has video

   [2]: http://www.stuffwithstuff.com/bob-nystrom.html
   [3]: http://bitbucket.org/munificent/
   [4]: http://github.com/munificent/
   [5]: http://www.flickr.com/photos/bobisbob/
   [6]: http://twitter.com/munificentbob
   [7]: http://vimeo.com/bobisbob

## archives

  * [2011][8]
  * [2010][9]
  * [2009][10]
  * [2008][11]

   [8]: http://journal.stuffwithstuff.com/2011/ (2011)
   [9]: http://journal.stuffwithstuff.com/2010/ (2010)
   [10]: http://journal.stuffwithstuff.com/2009/ (2009)
   [11]: http://journal.stuffwithstuff.com/2008/ (2008)

## tags

  * [blog][12] (2)
  * [c#][13] (13)
  * [code][14] (48)
  * [cpp][15] (7)
  * [design][16] (3)
  * [f#][17] (2)
  * [finch][18] (3)
  * [game-dev][19] (6)
  * [game-patterns][20] (3)
  * [go][21] (2)
  * [jasic][22] (1)
  * [java][23] (10)
  * [javascript][24] (3)
  * [language][25] (29)
  * [magpie][26] (19)
  * [optimization][27] (1)
  * [oscon][28] (1)
  * [parsing][29] (7)
  * [politics][30] (1)
  * [python][31] (2)
  * [roguelike][32] (2)
  * [ruby][33] (1)
  * [sml][34] (1)
  * [visualization][35] (1)

   [12]: http://journal.stuffwithstuff.com/category/blog/ (View all posts filed under blog)
   [13]: http://journal.stuffwithstuff.com/category/c/ (View all posts filed under c#)
   [14]: http://journal.stuffwithstuff.com/category/code/ (View all posts filed under code)
   [15]: http://journal.stuffwithstuff.com/category/cpp/ (View all posts filed under cpp)
   [16]: http://journal.stuffwithstuff.com/category/design/ (View all posts filed under design)
   [17]: http://journal.stuffwithstuff.com/category/f/ (View all posts filed under f#)
   [18]: http://journal.stuffwithstuff.com/category/finch/ (View all posts filed under finch)
   [19]: http://journal.stuffwithstuff.com/category/game-dev/ (View all posts filed under game-dev)
   [20]: http://journal.stuffwithstuff.com/category/game-patterns/ (View all posts filed under game-patterns)
   [21]: http://journal.stuffwithstuff.com/category/go/ (View all posts filed under go)
   [22]: http://journal.stuffwithstuff.com/category/jasic/ (View all posts filed under jasic)
   [23]: http://journal.stuffwithstuff.com/category/java/ (View all posts filed under java)
   [24]: http://journal.stuffwithstuff.com/category/javascript/ (View all posts filed under javascript)
   [25]: http://journal.stuffwithstuff.com/category/language/ (View all posts filed under language)
   [26]: http://journal.stuffwithstuff.com/category/magpie/ (View all posts filed under magpie)
   [27]: http://journal.stuffwithstuff.com/category/optimization/ (View all posts filed under optimization)
   [28]: http://journal.stuffwithstuff.com/category/oscon/ (View all posts filed under oscon)
   [29]: http://journal.stuffwithstuff.com/category/parsing/ (View all posts filed under parsing)
   [30]: http://journal.stuffwithstuff.com/category/politics/ (View all posts filed under politics)
   [31]: http://journal.stuffwithstuff.com/category/python/ (View all posts filed under python)
   [32]: http://journal.stuffwithstuff.com/category/roguelike/ (View all posts filed under roguelike)
   [33]: http://journal.stuffwithstuff.com/category/ruby/ (View all posts filed under ruby)
   [34]: http://journal.stuffwithstuff.com/category/sml/ (View all posts filed under sml)
   [35]: http://journal.stuffwithstuff.com/category/visualization/ (View all posts filed under visualization)

## info

  * [famfamfam][36] provides icons
  * [RSS][37] syndicates me
  * [WordPress][38] powers me

   [36]: http://famfamfam.com/lab/icons/silk/
   [37]: feed:http://journal.stuffwithstuff.com/feed/
   [38]: http://wordpress.org/

## [Killing Primitive Loops and Conditionals][39]

   [39]: http://journal.stuffwithstuff.com/2010/07/24/killing-primitive-loops-and-conditionals/ (Killing Primitive Loops and Conditionals)

[code][40] | [finch][41] | [language][42] [2010][43] / [07][44] / [24][45]

   [40]: http://journal.stuffwithstuff.com/category/code/ (View all posts in code)
   [41]: http://journal.stuffwithstuff.com/category/finch/ (View all posts in finch)
   [42]: http://journal.stuffwithstuff.com/category/language/ (View all posts in language)
   [43]: http://journal.stuffwithstuff.com/2010/ (year)
   [44]: http://journal.stuffwithstuff.com/2010/07/ (month)
   [45]: http://journal.stuffwithstuff.com/2010/07/24/

The challenge I had giving my talk on [Finch][46] at the [Emerging Languages
Camp][47] yesterday was knowing that I had nothing original to say that the
megabrains in front of me didn't already know. Worse, my unscheduled talk was
during what was originally a break, so not only did I have to compete with
[Rich Hickey][48] and [Gilad Bracha][49], I had to compete with _going to take
a leak or maybe having some ice cream_.

   [46]: http://finch.stuffwithstuff.com/
   [47]: http://emerginglangs.com/
   [48]: http://clojure.org/
   [49]: http://bracha.org/Site/Newspeak.html

I figured since I couldn't outwit them, I'd go for zany shenanigans, which
seemed to work pretty well. I only managed to say one patently dumb thing that
I'm aware of. Late in the talk, I mentioned that a language only needed two
primitive flow control constructs: `if` for jumping forward, and `while` for
jumping back. A couple of voices in the audience immediately called me on it,
saying "You don't even need those!"

I stammered some awkward reply and went on to something else. It turns out
knowing more about implementing programming languages than 99.99% of the world
is a small consolation when the remaining 0.01% are sitting in the audience in
front of you.

In the shower this morning, it finally dawned on me what they were getting at.
As of this evening, Finch [no longer][50] has _any_ primitive flow control
constructs. Here's how:

   [50]: http://bitbucket.org/munificent/finch/changeset/846bdbf7e8ed

### Conditions

Unless you're writing some batch script that just does X, Y, Z, you're going
to eventually need two things: to _not_ do something, and to do something
_more than once_. `if:then:else:` calls in Finch handle the former. They look
like this:



    if: rapper = vanilla ice then: {
        writeLine: "Too cold"
    } else: {
        writeLine: "Wack MC"
    }


If you aren't familiar with Finch, I can translate that into something a
little more vanilla. What you see there is a single call to an `if:then:else:`
function, passing in three arguments. The first is the condition-- the result
of evaluating `rapper = vanilla ice`. The other two are "blocks", what other
languages call lambdas or closures.

All `if:then:else:` needs to do is invoke the first block argument if the
condition is true, and the second if it's false. How can we do this using the
building blocks Finch already has?

The one thing Finch has that's like `if` is dynamic dispatch: Finch
intrinsically knows how to send the same message to different objects and have
them behave differently.

It's pretty straightforward to get conditionals working in terms of that.
We'll define two `ifTrue:else:` methods. The version on objects that are
truthy will always evaluate the "then" block argument (with no conditional
logic needed). The version bound to false objects will always evaluate the
"else" argument.

In Finch, all objects are implicitly false except for the one magic `True`
object, so the code looks like this:



    Object prototype :: ifTrue: then else: else { else call }
    True :: ifTrue: then else: else { then call }


The first line defines `ifTrue:else:` on the prototypical object that all
others inherit from. All it does is invoke the "else" block. The second line
overrides method that for the `True` global object to instead invoke the
"then" block.

(I should note here that this is exactly how Smalltalk works. All condition
logic is done with message sends to boolean objects. So, uh, I really should
have known this the whole time.) Because I'm not crazy about how Smalltalk
syntax looks for this, we'll go ahead and wrap it in [a method on Ether][51]
to make it look a little more normal:


       [51]: http://journal.stuffwithstuff.com/2010/06/25/methods-on-the-ether-or-creating-your-own-control-structures-for-fun-and-profit/

    Ether :: if: condition then: then else: else {
        condition ifTrue: then else: else
    }


All that does is bounce the call over as a message on the condition object,
and we've got `if:then:else:` working without needing any hard-coded support
beyond message dispatch. Swell!

### Loops

Now that we can do stuff less than one time, let's see how to do stuff _more_
than one time. Everyone who took Scheme in college now has their hand waving
furiously in the air. Yes, I'm going to call on you. Yes, you have the right
answer. First, here's a while loop:



    while: { mother burnedDown? not } do: {
        writeLine: "Burn, baby, burn"
        writeLine: "Disco inferno"
    }


If you don't have looping built in, there's only one way for something to
happen more than once: it has to invoke _itself_ recursively. I've known about
using tail recursion for loops for a long time but for some reason it fell off
my radar. Maybe because Finch didn't get proper [tail call optization][52]
until recently, or maybe it's all the alcohol.

   [52]: http://en.wikipedia.org/wiki/Tail_call_optimization

Now that Finch _does_ have it, we can use it like so:



    Ether :: while: condition do: block {
        if: condition call then: {
            block call
            while: condition do: block
        }
    }


All it does is check the condition. If `True`, it evaluates the block and then
recursively calls itself. The TCO will ensure that it can loop as long as it
needs like this without worrying about blowing the stack.

The end result of all of this is that I got to delete a good chunk of C++ code
and replace it with a little Finch code. And I learned a little lesson about
making blanket assertions when standing in front of a bunch of really smart
people.

Discuss this at one of the sites below (or another of your choice):

[ ![][53]][54]

   [53]: http://cdn.stumble-upon.com/images/120x20_su_white.gif
   [54]: http://www.stumbleupon.com/submit?url=http://journal.stuffwithstuff.com%26title%3DThe%2BArticle%2BTitle

If you want to contact me directly, feel free to email at "name@site" where
"name" is "robert" and "site" is "stuffwithstuff.com".

(C) 2008-2009 Robert Nystrom


