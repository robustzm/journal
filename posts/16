# [journal.

stuffwithstuff.com][1]

   [1]: http://journal.stuffwithstuff.com/

## me

  * [bob nystrom][2] is me
  * [bitbucket][3] has code
  * [github][4] has code
  * [flickr][5] has photos
  * [twitter][6] has status
  * [vimeo][7] has video

   [2]: http://www.stuffwithstuff.com/bob-nystrom.html
   [3]: http://bitbucket.org/munificent/
   [4]: http://github.com/munificent/
   [5]: http://www.flickr.com/photos/bobisbob/
   [6]: http://twitter.com/munificentbob
   [7]: http://vimeo.com/bobisbob

## archives

  * [2011][8]
  * [2010][9]
  * [2009][10]
  * [2008][11]

   [8]: http://journal.stuffwithstuff.com/2011/ (2011)
   [9]: http://journal.stuffwithstuff.com/2010/ (2010)
   [10]: http://journal.stuffwithstuff.com/2009/ (2009)
   [11]: http://journal.stuffwithstuff.com/2008/ (2008)

## tags

  * [blog][12] (2)
  * [c#][13] (13)
  * [code][14] (48)
  * [cpp][15] (7)
  * [design][16] (3)
  * [f#][17] (2)
  * [finch][18] (3)
  * [game-dev][19] (6)
  * [game-patterns][20] (3)
  * [go][21] (2)
  * [jasic][22] (1)
  * [java][23] (10)
  * [javascript][24] (3)
  * [language][25] (29)
  * [magpie][26] (19)
  * [optimization][27] (1)
  * [oscon][28] (1)
  * [parsing][29] (7)
  * [politics][30] (1)
  * [python][31] (2)
  * [roguelike][32] (2)
  * [ruby][33] (1)
  * [sml][34] (1)
  * [visualization][35] (1)

   [12]: http://journal.stuffwithstuff.com/category/blog/ (View all posts filed under blog)
   [13]: http://journal.stuffwithstuff.com/category/c/ (View all posts filed under c#)
   [14]: http://journal.stuffwithstuff.com/category/code/ (View all posts filed under code)
   [15]: http://journal.stuffwithstuff.com/category/cpp/ (View all posts filed under cpp)
   [16]: http://journal.stuffwithstuff.com/category/design/ (View all posts filed under design)
   [17]: http://journal.stuffwithstuff.com/category/f/ (View all posts filed under f#)
   [18]: http://journal.stuffwithstuff.com/category/finch/ (View all posts filed under finch)
   [19]: http://journal.stuffwithstuff.com/category/game-dev/ (View all posts filed under game-dev)
   [20]: http://journal.stuffwithstuff.com/category/game-patterns/ (View all posts filed under game-patterns)
   [21]: http://journal.stuffwithstuff.com/category/go/ (View all posts filed under go)
   [22]: http://journal.stuffwithstuff.com/category/jasic/ (View all posts filed under jasic)
   [23]: http://journal.stuffwithstuff.com/category/java/ (View all posts filed under java)
   [24]: http://journal.stuffwithstuff.com/category/javascript/ (View all posts filed under javascript)
   [25]: http://journal.stuffwithstuff.com/category/language/ (View all posts filed under language)
   [26]: http://journal.stuffwithstuff.com/category/magpie/ (View all posts filed under magpie)
   [27]: http://journal.stuffwithstuff.com/category/optimization/ (View all posts filed under optimization)
   [28]: http://journal.stuffwithstuff.com/category/oscon/ (View all posts filed under oscon)
   [29]: http://journal.stuffwithstuff.com/category/parsing/ (View all posts filed under parsing)
   [30]: http://journal.stuffwithstuff.com/category/politics/ (View all posts filed under politics)
   [31]: http://journal.stuffwithstuff.com/category/python/ (View all posts filed under python)
   [32]: http://journal.stuffwithstuff.com/category/roguelike/ (View all posts filed under roguelike)
   [33]: http://journal.stuffwithstuff.com/category/ruby/ (View all posts filed under ruby)
   [34]: http://journal.stuffwithstuff.com/category/sml/ (View all posts filed under sml)
   [35]: http://journal.stuffwithstuff.com/category/visualization/ (View all posts filed under visualization)

## info

  * [famfamfam][36] provides icons
  * [RSS][37] syndicates me
  * [WordPress][38] powers me

   [36]: http://famfamfam.com/lab/icons/silk/
   [37]: feed:http://journal.stuffwithstuff.com/feed/
   [38]: http://wordpress.org/

## [Loops in Magpie][39]

   [39]: http://journal.stuffwithstuff.com/2009/05/15/loops-in-magpie/ (Loops in Magpie)

[c#][40] | [code][41] | [language][42] | [magpie][43] [2009][44] / [05][45] /
[15][46]

   [40]: http://journal.stuffwithstuff.com/category/c/ (View all posts in c#)
   [41]: http://journal.stuffwithstuff.com/category/code/ (View all posts in code)
   [42]: http://journal.stuffwithstuff.com/category/language/ (View all posts in language)
   [43]: http://journal.stuffwithstuff.com/category/magpie/ (View all posts in magpie)
   [44]: http://journal.stuffwithstuff.com/2009/ (year)
   [45]: http://journal.stuffwithstuff.com/2009/05/ (month)
   [46]: http://journal.stuffwithstuff.com/2009/05/15/

I'm working on the loop syntax in Magpie right now, and I think I more or less
have the plan figured out. Looping is a bit tricky in a language: there's a
ton of different ways to do it from C's basic `for (i = 0; i < 100; i++)` to
Lisp's super-powerful (and super-complex) `loop` macro.

My goals for loops are the same as my goals for the language in general:

  * Add as few new keywords as possible.
  * Use function calls for as much of it as possible.
  * There must be no visible line between "baked-in" loop functions and user-defined ones.
  * The most common use cases should be the most terse.

The last point is especially pertinent, and is one of the guiding philosophies
of the language: the things users do the most should be the most terse. Sort
of like [Huffman encoding][47] for a language.

   [47]: http://en.wikipedia.org/wiki/Huffman_encoding

To do that, I did a little archaeology: I looked at every place in the Magpie
C# compiler where I'm using `for` or `foreach`. The results are:

  * There are 14 `for` loops and 40 `foreach` ones.
  * 9 of the `for` loops are to iterate through two arrays in parallel.
  * 3 of the `for` loops are to iterate backwards.
  * 2 of the `for` loops are to assign to array elements.
  * 1 of the `for` loops is to iterate a certain number of times.
  * None of the `for` or `foreach` loops reuse an existing variable for the current item.

From this, it's pretty clear that I need to focus on iterating through
collections (i.e. [enumerators][48] or [generators][49]), and assume that the
user wants a new variable for the current item. Also, iterating through
multiple collections simultaneously should be fairly easy to do. This leads me
to adding just one new keyword:


       [48]: http://msdn.microsoft.com/en-us/library/system.collections.ienumerable.aspx
   [49]: http://www.python.org/dev/peps/pep-0255/

    for <var> <- <generator> do
        ...
    end


In addition, multiple `for` clauses can be provided (but only one `do`) to
iterate through multiple collections in parallel. I still need to work out the
details, but I'm thinking that that will be syntactic sugar for:



    // evaluate the generator expression once
    def _generator <- Generate <generator>

    // advance to the first item
    _generator.MoveNext
    while Not _generator.IsDone do
        def <var> <- _generator.Current
        ...
        _generator.MoveNext
    end


Using that, the use cases I have can be solved by:



    // iterating through a collection
    for item <- someList do
        Print item
    end

    // iterating multiple collections in lockstep
    for a <- someList1
    for b <- someList2 do
        Print (a == b).String
    end

    // iterating backwards
    for item <- Reverse someList
        Print item
    end

    // assigning to array elements
    for index <- array.Indexes
        array.index <- 0
    end

    // iterating a fixed number of times
    for i <- 50.Times
        Print i.String
    end

    // iterating through a range
    for i <- Range (10, 30)
        Print i.String
    end


In those examples, `Reverse`, `Indexes`, `Times`, and `Range` can all be
simple library functions. There's nothing magical about them. This may change
when the rubber meets the road as I implement it, but it feels about right so
far.

Discuss this at one of the sites below (or another of your choice):

[ ![][50]][51]

   [50]: http://cdn.stumble-upon.com/images/120x20_su_white.gif
   [51]: http://www.stumbleupon.com/submit?url=http://journal.stuffwithstuff.com%26title%3DThe%2BArticle%2BTitle

If you want to contact me directly, feel free to email at "name@site" where
"name" is "robert" and "site" is "stuffwithstuff.com".

(C) 2008-2009 Robert Nystrom


