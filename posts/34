# [journal.

stuffwithstuff.com][1]

   [1]: http://journal.stuffwithstuff.com/

## me

  * [bob nystrom][2] is me
  * [bitbucket][3] has code
  * [github][4] has code
  * [flickr][5] has photos
  * [twitter][6] has status
  * [vimeo][7] has video

   [2]: http://www.stuffwithstuff.com/bob-nystrom.html
   [3]: http://bitbucket.org/munificent/
   [4]: http://github.com/munificent/
   [5]: http://www.flickr.com/photos/bobisbob/
   [6]: http://twitter.com/munificentbob
   [7]: http://vimeo.com/bobisbob

## archives

  * [2011][8]
  * [2010][9]
  * [2009][10]
  * [2008][11]

   [8]: http://journal.stuffwithstuff.com/2011/ (2011)
   [9]: http://journal.stuffwithstuff.com/2010/ (2010)
   [10]: http://journal.stuffwithstuff.com/2009/ (2009)
   [11]: http://journal.stuffwithstuff.com/2008/ (2008)

## tags

  * [blog][12] (2)
  * [c#][13] (13)
  * [code][14] (48)
  * [cpp][15] (7)
  * [design][16] (3)
  * [f#][17] (2)
  * [finch][18] (3)
  * [game-dev][19] (6)
  * [game-patterns][20] (3)
  * [go][21] (2)
  * [jasic][22] (1)
  * [java][23] (10)
  * [javascript][24] (3)
  * [language][25] (29)
  * [magpie][26] (19)
  * [optimization][27] (1)
  * [oscon][28] (1)
  * [parsing][29] (7)
  * [politics][30] (1)
  * [python][31] (2)
  * [roguelike][32] (2)
  * [ruby][33] (1)
  * [sml][34] (1)
  * [visualization][35] (1)

   [12]: http://journal.stuffwithstuff.com/category/blog/ (View all posts filed under blog)
   [13]: http://journal.stuffwithstuff.com/category/c/ (View all posts filed under c#)
   [14]: http://journal.stuffwithstuff.com/category/code/ (View all posts filed under code)
   [15]: http://journal.stuffwithstuff.com/category/cpp/ (View all posts filed under cpp)
   [16]: http://journal.stuffwithstuff.com/category/design/ (View all posts filed under design)
   [17]: http://journal.stuffwithstuff.com/category/f/ (View all posts filed under f#)
   [18]: http://journal.stuffwithstuff.com/category/finch/ (View all posts filed under finch)
   [19]: http://journal.stuffwithstuff.com/category/game-dev/ (View all posts filed under game-dev)
   [20]: http://journal.stuffwithstuff.com/category/game-patterns/ (View all posts filed under game-patterns)
   [21]: http://journal.stuffwithstuff.com/category/go/ (View all posts filed under go)
   [22]: http://journal.stuffwithstuff.com/category/jasic/ (View all posts filed under jasic)
   [23]: http://journal.stuffwithstuff.com/category/java/ (View all posts filed under java)
   [24]: http://journal.stuffwithstuff.com/category/javascript/ (View all posts filed under javascript)
   [25]: http://journal.stuffwithstuff.com/category/language/ (View all posts filed under language)
   [26]: http://journal.stuffwithstuff.com/category/magpie/ (View all posts filed under magpie)
   [27]: http://journal.stuffwithstuff.com/category/optimization/ (View all posts filed under optimization)
   [28]: http://journal.stuffwithstuff.com/category/oscon/ (View all posts filed under oscon)
   [29]: http://journal.stuffwithstuff.com/category/parsing/ (View all posts filed under parsing)
   [30]: http://journal.stuffwithstuff.com/category/politics/ (View all posts filed under politics)
   [31]: http://journal.stuffwithstuff.com/category/python/ (View all posts filed under python)
   [32]: http://journal.stuffwithstuff.com/category/roguelike/ (View all posts filed under roguelike)
   [33]: http://journal.stuffwithstuff.com/category/ruby/ (View all posts filed under ruby)
   [34]: http://journal.stuffwithstuff.com/category/sml/ (View all posts filed under sml)
   [35]: http://journal.stuffwithstuff.com/category/visualization/ (View all posts filed under visualization)

## info

  * [famfamfam][36] provides icons
  * [RSS][37] syndicates me
  * [WordPress][38] powers me

   [36]: http://famfamfam.com/lab/icons/silk/
   [37]: feed:http://journal.stuffwithstuff.com/feed/
   [38]: http://wordpress.org/

## [A Type-checking Conundrum!][39]

   [39]: http://journal.stuffwithstuff.com/2010/09/01/a-type-checking-conundrum/ (A Type-checking Conundrum!)

[code][40] | [language][41] | [magpie][42] [2010][43] / [09][44] / [01][45]

   [40]: http://journal.stuffwithstuff.com/category/code/ (View all posts in code)
   [41]: http://journal.stuffwithstuff.com/category/language/ (View all posts in language)
   [42]: http://journal.stuffwithstuff.com/category/magpie/ (View all posts in magpie)
   [43]: http://journal.stuffwithstuff.com/2010/ (year)
   [44]: http://journal.stuffwithstuff.com/2010/09/ (month)
   [45]: http://journal.stuffwithstuff.com/2010/09/01/

Ever since I decided to mesh the worlds of static and dynamic typing together
in Magpie, I've been wondering when the gears would really grind together and
halt. Today is the day.

The issue I'm running into is one of hidden state, both in closures and in
objects. Consider this post a plea for assistance or ideas.

### A Quick Intro

Just to frame things since you are very likely not at all familiar with
Magpie, here's the salient features of the language:

  1. It's a dynamically-typed OOP language like Python or Ruby.
  2. You can optionally add type annotations to method parameters or returns.
  3. After the top-level of a script is run, but before `main()` is called, it will statically type-check the script to look for errors based on the annotations you've provided.

Here's a simple example:



    var say(what String ->)
        print(what)
    end

    say("hey")


This program will run fine and do what you expect. Now consider this one:



    var say(what String ->)
        print(what)
    end

    say(123)


This one will actually run without errors too (and print "123″ since `print`
converts its argument to a string anyway). That's because the call to
`say(123)` is at the top-level, which is run before type-checking. If we
change it to this:



    var say(what String ->)
        print(what)
    end

    var main(->)
        say(123)
    end


Now we'll correctly get a error that `say` expects a `String` and is being
passed an `Int`. It will then stop without ever calling `main()`.

### Conundrum!

All that so far is fine and dandy. Now lets consider something a little…
softer:



    var returnString(-> String)
        var a = 123
        a = "string"
        return a
    end


This type-checks fine too. At the point that we're returning `a`, the type-
checker knows its a `String` as expected. But this hilights an important
feature: variables can change their type. That makes sense given that Magpie
is at its core a dynamic language. It also plays nicely with some other
features like [or types][46].

   [46]: http://journal.stuffwithstuff.com/2010/08/23/void-null-maybe-and-nothing/

Unfortunately, it's also the heart of the problem. Consider this example:



    var a = 123

    var returnInt(-> Int)
        return a
    end

    a = "string"
    returnInt()


The type-checker runs through that top-down. First it evaluates `var a = 123`
and records that `a` is defined with the type of `123`: `Int`. Then it
verifies that `returnInt()` returns its declared type (`Int`), it looks at the
body of the function. It's just returning `a`. It's already noted that `a`'s
type is `Int`, so everything looks fine. Later it updates the type of `a` to
`String` but at that point, the damage is done.

When this program is run, `returnInt()` will return a `String` even though the
type-checker didn't notice the error.

In this example, the problem manifests through a closure (accessing a variable
declared outside of a function's scope), but objects can have the exact same
problem. A method's return type may be based on a field, but that field's type
could change at any time.

### Options

So, how should Magpie handle this? Options I can think of are:

#### Do some really smart analysis to look at _every_ place a field or closed-
over variable is assigned to and set its type to the union of all of those.

That seems like the Right Thing to Do, but I'm pretty sure it's
undecidable/intractable/impossible given recursion and other circular
references.

#### Do nothing. Change a variable's type at your own risk.

From the static type system point of view, that seems… dirty. But Magpie never
promises perfect type-checking, just a little more than you get from a
completely dynamic language. It doesn't give type guarantees, just type
gentleman's agreements.

Also, like a dynamic language, it won't completely die if you pass a variable
of the wrong type to a method, it'll just end up with some "method not found"
error. In other words, the "wrong" behavior here is no worse than every other
dynamic language on Earth.

#### Don't allow variables to change type.

This is the static language solution. If a variable can't change type after
initialization, this problem vanishes completely. But it feels like a weird
thing for a dynamic language to do.

### Now What?

Not that anyone but me really cares about Magpie, but if you do care enough to
have a suggestion, I'm all ears. I tried scanning through the literature on
gradual and optional typing, but I didn't see anything that caught my eye. (I
believe [Siek's][47] solution is to disallow references to change type.)

   [47]: http://ecee.colorado.edu/~siek/gradualtyping.html

For now, I'll just default to "do nothing", but if there's a cleaner solution
that can help users catch real type errors before their programs run, that
would be super awesome.

Discuss this at one of the sites below (or another of your choice):

[ ![][48]][49]

   [48]: http://cdn.stumble-upon.com/images/120x20_su_white.gif
   [49]: http://www.stumbleupon.com/submit?url=http://journal.stuffwithstuff.com%26title%3DThe%2BArticle%2BTitle

If you want to contact me directly, feel free to email at "name@site" where
"name" is "robert" and "site" is "stuffwithstuff.com".

(C) 2008-2009 Robert Nystrom


